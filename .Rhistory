?t
fit <- train(Area ~ ., data=olive, method="rpart")
p <- predict(fit, newdata)
library(rattle)
fancyRpartPlot(p$finalModel
fancyRpartPlot(p$finalModel)
fancyRpartPlot(p$finalModel)
p
fit <- train(Area ~ ., data=olive, method="rpart2")
p <- predict(fit, newdata)
library(rattle)
fancyRpartPlot(p)
p
olive$Area
head(olive)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
names(SAheart)
head(SAheart)
head(train)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
fit
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(fit, trainSA))
missClass(SAheart$chd, predict(fit, testSA))
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
class(vowel.train$y)
class(as.factor(vowel.train$y))
vowel.train <- as.factor(vowel.train[1,])
vowel.train <- as.factor(vowel.train$y)
class(vowel.train$y)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.train$y <- factor(vowel.train$y)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
class(vowel.train$y)
set.seed(33833)
fit <- randomForest(y ~ ., method="rf", data=vowel.train)
fit <- randomForest(y ~ ., data=vowel.train)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- randomForest(y ~ ., data=vowel.train)
varimp <- varImp(fit)
plot(varimp, top=25)
plot(varimp)
fit <- train(y ~ ., data=vowel.train, method="rf")
varimp <- varImp(fit)
plot(varimp)
order(varimp)
fit <- train(y ~ ., data=vowel.train, method="rf", importance=FALSE)
varimp <- varImp(fit)
plot(varimp)
order(varimp)
fit <- randomForest(y ~ ., data=vowel.train, importance=FALSE)
varimp <- varImp(fit)
order(varimp)
vowel <- rbind(vowel.test,vowel.train)
vowel$y <- factor(vowel$y)
set.seed(33833)
fit <- randomForest(y ~ ., data=vowel, importance=FALSE)
varimp <- varImp(fit)
plot(varimp)
order(varimp)
class(vowel$y)
fit <- train(y ~ ., data=vowel, method="rf")
varimp <- varImp(fit)
order(varimp)
fit <- train(y ~ ., data=vowel, method="rf", list=FALSE)
varimp <- varImp(fit)
order(varimp)
fit1 <- randomForest(y ~ ., data=vowel.train, importance=FALSE)
varimp1 <- varImp(fit1)
order(varimp1)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.test,vowel.train)
vowel$y <- factor(vowel$y)
set.seed(33833)
fit1 <- randomForest(y ~ ., data=vowel.train, importance=FALSE)
varimp1 <- varImp(fit1)
order(varimp1)
plot(varimp1)
fit1 <- randomForest(y ~ ., data=vowel.train)
varimp1 <- varImp(fit1)
order(varimp1)
plot(varimp1)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- randomFo
set.seed(33833)
fit <- randomForest(y ~ ., data=vowel.test)
v <- varImp(fit)
v
?order
order(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
plot(v)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
fit <- randomForest(y ~ ., data=vowel)
v <- varImp(fit)
order(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel, trControl=trainControl(method="cv",number=5), method="rf")
v <- varImp(fit)
order(v)
fit <- train(y ~ ., data=vowel, trControl=trainControl(method="cv",number=4), method="rf")
v <- varImp(fit)
order(v)
v
v
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel, trControl=trainControl(method="cv",number=4), method="rf")
fit <- randomForest(y ~ ., data=vowel)
v <- varImp(fit)
order(v)
plot(v)
v
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel, trControl=trainControl(method="cv",number=4), method="rf")
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
plot(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, trControl=trainControl(method="cv",number=4), method="rf")
#fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
plot(v)
v
vowel
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, method="rf")
#fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
plot(v)
v
?order
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf")
fit <- randomForest(y ~ ., data=vowel.train, importance=TRUE)
v <- varImp(fit)
order(v)
plot(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf")
fit <- randomForest(y ~ ., data=vowel.train, importance=FALSE)
v <- varImp(fit)
order(v)
plot(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
vowel <- rbind(vowel.train, vowel.test)
vowel$y <- factor(vowel$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf")
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
plot(v)
v
fit
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf")
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, method="rf")
#fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
#fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
v
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
#fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
v
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
#fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
#fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit)
order(v)
?randomForest
?varImp
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
#fit <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
fit <- randomForest(y ~ ., data=vowel.train)
v <- varImp(fit, useModel = TRUE)
order(v)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fitrf <- train(y ~ ., data=vowel.train, method="rf", trControl = trainControl(method="cv", number=4))
fitgbm <- train(y ~ ., data=vowel.train, method="gbm")
class(fitrf)
class(fitgbm)
fitgbm <- train(y ~ ., data=vowel.train, method="gbm")
fitrf
fitgbm
predrf <- predict(fitrf, vowel.test)
predgbm <- predict(fitgbm, vowel.test)
predrf$overall
predrf$overall[1]
predrf
cfm_rf <- confusionMatrix(predrf, vowel.test$y)
cfm_gbm <- confusionMatrix(predgbm, vowel.test$y)
cfm_rf$overall[1]
cfm_gbm$overall[1]
fitrf <- train(y ~ ., data=vowel.train, method="rf")
predrf <- predict(fitrf, vowel.test)
cfm_rf <- confusionMatrix(predrf, vowel.test$y)
cfm_rf$overall[1]
a <- data.frame(predrf, predgbm, vowel.test$y, agree=(predrf==predgbm))
a
class()
class(a)
head(a)
accuracy <- sum(predrf[a$agree] == a$y[a$agree]) / sum(a$agree)
accuracy
table(a$agree)
accuracy <- sum(predrf[a$agree] == a$vowel.test.y[a$agree]) / sum(a$agree)
accuracy
a <- data.frame(predrf, predgbm, vowel.test$y)
fitcmb <- train(y ~ ., data=a, method="gam")
predcmb <- predict(fitcmb, a)
predcmb$overall[1]
cfm_cmb <- confusionMatrix(predcmb, vowel.test$y)
predcmb <- predict(fitcmb, a)
a <- data.frame(predrf, predgbm, vowel.test$y)
fitcmb <- train(y ~ ., data=a, method="gam")
predcmb <- predict(fitcmb, a)
fitcmb <- train(vowel.test.y ~ ., data=a, method="gam")
predcmb <- predict(fitcmb, a)
cfm_cmb <- confusionMatrix(predcmb, vowel.test$y)
cfm_cmb$overall[1]
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fitrf <- train(y ~ ., data=vowel.train, method="rf")
fitgbm <- train(y ~ ., data=vowel.train, method="gbm")
predrf <- predict(fitrf, vowel.test)
predgbm <- predict(fitgbm, vowel.test)
a <- data.frame(predrf, predgbm, vowel.test$y)
fitcmb <- train(vowel.test.y ~ ., data=a, method="gam")
predcmb <- predict(fitcmb, a)
cfm_rf <- confusionMatrix(predrf, vowel.test$y)
cfm_gbm <- confusionMatrix(predgbm, vowel.test$y)
cfm_cmb <- confusionMatrix(predcmb, vowel.test$y)
cfm_rf$overall[1]
cfm_gbm$overall[1]
cfm_cmb$overall[1]
class(predrf)
table(predrf)
head(predrf)
head(predgbm)
table(predgbm)
predgbm
predrf
head(vowel.test$y)
vowel.test$y
levels(predrf)
levels(predgbm)
length(levels(predgbm))
predrf[1]
predrf[2]
predrf[431]
length(predrf)
length(predgbm)
table(predrf==predgbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fitrf <- train(diagnosis ~ ., data=training, method="rf")
fitgbm <- train(diagnosis ~ ., data=training, method="gbm")
fitlda <- train(diagnosis ~ ., data=training, method="lda")
predrf <- predict(fitrf, testing)
predgbm <- predict(fitgbm, testing)
predlda <- predict(fitlda, testing)
all <- data.frame(predrf, predgbm, predlda, diagnosis=testing$diagnosis)
trainall <- train(diagnosis ~ ., data=all, method="rf")
predall <- predict(all, testing)
predall <- predict(trainall, testing)
cfmrf <- confusionMatrix(predrf, testing$diagnosis)$overall[1]
cfmgbm <- confusionMatrix(predgbm, testing$diagnosis)$overall[1]
cfmlda <- confusionMatrix(predlda, testing$diagnosis)$overall[1]
cfmall <- confusionMatrix(predall, testing$diagnosis)$overall[1]
cfmrf
cfmgbm
cfmlda
cfmall
predrf
training$diagnosis
levels(training$diagnosis)
testing$diagnosis
dim(testing)
nrow(testing)
ncol(testing)
length(predrf)
table(predrf == testing$diagnosis)
63/(63+19)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fitm <- train(CompressiveStrength ~ ., data=training, method="lasso")
fitm <- train(CompressiveStrength ~ ., data=training, method="lasso")
fitm
cfm1 <- confusionMatrix(fitm, training$CompressiveStrength)
cfm1 <- confusionMatrix(fitm, testing$CompressiveStrength)
cfm1 <- confusionMatrix(predict(fitm, testing), testing$CompressiveStrength)
?plot.enet
plot.enet(fit$finalModel, xvar="penalty", use.color=T)
plot.enet(fitm$finalModel, xvar="penalty", use.color=T)
plot.enet(fitm$finalModel)
plot.enet(fitm$finalModel, xvar="penalty")
install.packages(c("boot", "class", "foreign", "Hmisc", "KernSmooth", "lattice", "manipulate", "MASS", "nlme", "nnet", "R.methodsS3", "rpart", "spatial", "survival"))
install.packages(c("boot", "class", "foreign", "Hmisc", "KernSmooth",
)
)
install.packages(c("boot", "class", "foreign", "Hmisc", "KernSmooth", "lattice", "manipulate", "MASS", "nlme", "nnet", "R.methodsS3", "rpart", "spatial", "survival"))
install.packages(c("boot", "class", "foreign", "Hmisc", "KernSmooth",
install.packages(c("boot", "class", "foreign", "Hmisc", "KernSmooth", "lattice", "manipulate", "MASS", "nlme", "nnet", "R.methodsS3", "rpart", "spatial", "survival"))
install.packages(c("forecast", "manipulate", "R.oo", "R.utils"))
library(shiny)
install.packages("shiny")
library(shiny)
setwd("~/Coursera/Developing-Data-Products")
ls
list()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
